# vim: textwidth=0:filetype=sh

% git

# Change branch
git checkout <branch>

$ branch: git branch | awk '{print $NF}'

# Checkout file from another branch
git checkout <branch> -- <paths>

# List files which have been staged
git diff --name-only --cached

# Use main as your main branch
git branch -M main

# Find file with unknown path
git log --all --full-history -- "**/<file_name>.*"

# Find file with known path
git log --all --full-history -- <full_path_to_file>

# Find commits not merged
git log <source_branch> --not <target_branch>

# Find which files have changed between commits
git log <source_branch> --not <target_branch> --stat

# List branches merged into master
git branch --merged master

# Delete local branches that have been merged
git branch --merged master | grep -v "master" | grep -v "production" | xargs git b -D

# Search git history for text within files
git log -S "<text>" <file_name>

# https://stackoverflow.com/a/56054951/2892779
# Find last commit which deleted a file
git rev-list -n 1 HEAD -- <full_path_to_file>

# Empty commit
git commit --allow-empty -m "Empty commit to trigger build"

#  List files and last modification dates
git ls-files -z | xargs -0 -n1 -I{} -- git log -1 --format="%ai {}" {}

# List files and last modifications dates, while searching a term
git ls-files | grep <search_term> | xargs -n1 -I{} -- git log -1 --format="%ai {}" {}

# Pre-compute file paths to speed up git log commands
git commit-graph write --reachable --changed-paths

# Add executable flag onto file
git update-index --chmod=+x <path_to_file>

# Remove executable flag onto file
git update-index --chmod=-x <path_to_file>

# Deploy a branch to a heroku remote
git push <reference_name> <branch>:main

# Deploy a specific tagged commit to a heroku remote
git push <remote> <tag>^{}:main

# List all files by date. Usefel for finding the oldest files in a repo
git ls-tree -r --name-only HEAD | while read filename; do
 echo "$(git log -1 --date=iso --format="%ad |" -- "$filename") $filename"
done > oldest_files.txt

# Compare 2 commits on github
open https://github.com/<org>/<repo>/compare/<commit_1>..<commit_2>

# Compare current branch with master
git diff-tree -r --no-commit-id --name-only head origin/master

# Compare current branch with current upstream
git diff-tree -r --no-commit-id --name-only @\{u\} head

# Run rubocop only on modified files (compared against upstream)
git diff-tree -r --no-commit-id --name-only --diff-filter=d @\{u\} HEAD | xargs bundle exec rubocop

# Run rubocop only on files modified locally, compared against remote
git diff-tree --no-commit-id --name-only --diff-filter d -r origin/master HEAD | grep rb | xargs bundle exec rubocop

# Find the latest annotated tag
git describe --abbrev=0

# Summary of the most recent commit
git log --stat -1

# List files changed in most recent commit
git diff-tree --no-commit-id --name-only HEAD -r


% tmux

# Kill tmux sessions
tmux kill-session -t <session>

$ session: tmux ls | awk '{print substr($1, 1, length($1)-1)}'

# Attach to existing tmux session
tmux attach-session -t <session>

$ session: tmux ls | awk '{print substr($1, 1, length($1)-1)}'

% redis

# Remove all keys of all existing redis databases
redis-cli FLUSHALL

# Fix "MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk"
redis-cli config set stop-writes-on-bgsave-error no


% xcode

# Install Command Line Tools if you haven't already
xcode-select --install

# Enable command line tools
sudo xcode-select --switch /Library/Developer/CommandLineTools

# Enable Xcode app
sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

# Warning: A newer Command Line Tools release is available.
# Update them from Software Update in System Preferences or run:
#   softwareupdate --all --install --force
#
# If that doesn't show you an update run:
#   sudo rm -rf /Library/Developer/CommandLineTools
#   sudo xcode-select --install
#
# Alternatively, manually download them from:
#  https://developer.apple.com/download/more/.
#
# Clear out CommandLineTools & re-install
sudo rm -rf /Library/Developer/CommandLineTools && sudo xcode-select --install


% font

# List installed fonts
fc-list


% macos

# Remove the developer cannot be verified message

xattr -d com.apple.quarantine <full_path_to_file>

# Disable Spotlight in a folder
touch .metadata_never_index

# Enable rosetta on m1
/usr/sbin/softwareupdate --install-rosetta


% rails

# Routes for specific controller
rails routes -c <controller_name>

# Update rails & dependencies
bundle update rails actionview actionpack activerecord activesupport railties activemodel --conservative

# Run specs for current changes from master only
git diff-tree -r --no-commit-id --name-only head origin/master | grep _spec | xargs bin/rspec


% postgres

# Create a directory snapshot
pg_dump --jobs=8 --format=d --file=<date>.snapshot.jay <database_name>

$ date: date -u +%Y-%m-%d

# Restore a directory snapshot (note: also run w/ --section=post-data after)
pg_restore --if-exists --no-owner --clean --create --format=d --jobs=8 --dbname=<database_name> <date>.snapshot.jay --section=pre-data --section=data

$ date: date -u +%Y-%m-%d


% zsh

# List directories ordered by size
du -hs * | sort -hr

# Count files in subdirectories
find . -type f | cut -d"/" -f2 | uniq -c

# Remove duplicates in zsh_history
cat -n .zsh_history | sort -t ';' -uk2 | sort -nk1 | cut -f2- > ~/.zsh_short_history && mv ~/.zsh_short_history ~/.zsh_history

# Sort files by number of lines
find <folder> -type f -exec wc -l {} + | sort -rn

# Sort file by lines greater than
awk 'length($0) > <max_length> {printf "%4d : %s(%4d):%s\n", length($0), FILENAME, FNR, $0}' <path_to_file>

# Fold long lines
fold -w <width> -s <input_file_name> > <output_file_name>


% zinit

# Update ziniit
zinit self-update

# Update zinit plugins
zinit update --parallel


% neovim nvim vim packer

# Update neovim
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'


% ctags

# Generate tags in from multiple directories
ctags -R --append . <folders>

$ folders: lsd */ -d | tr '\n' ' ' | grep -f <(git ls-files | sed "s/\/.*//" | uniq) --- --multi

# Generate tags for bundled gems in a sub-folder
ctags -R --append . $(cd <folder> && bundle list --paths)

$ folder: lsd */ -d | grep -f <(git ls-files | sed "s/\/.*//" | uniq)

# Generate tags for a ruby repository
ctags -R --languages=ruby --exclude=.git --exclude=log . $(bundle list --paths)


% asdf

# Gem update each ruby version
asdf list ruby | while read -r; do asdf local ruby $REPLY && gem update --system; done


% profiling

# Generate flamegraph with rbspy
sudo --preserve-env rbspy record <which_ruby> <file_name>

$ which_ruby: which ruby


% rg, ripgrep, zsh

# List files with lines greater than X characters
rg '.{<character_count>,}' <folder> -g '<file_glob>'

# Print line count of files in folder
rg -g '<file_glob>' --files . | xargs wc -l | sort


% curl

# curl GET URL as JSON
curl -H "Content-type: application/json" -H "Accept: application/json" "<url>"


% logs

# Use angle-grinder to parse Heroku router logs and find unique pages/paths
cat <log_file> | grep router | grep -Ev 'assets|favicon|png|manifest|robots|packs|wp-login|.env|php|svg|jpg' | agrind '* | logfmt | parse regex "path=\"(?P<url>[^? \"]+)" | fields url' > urls.txt
$ url: echo '<url''>'

% ffmpeg

# Split mp4 into multiple files
ffmpeg -i <file> -c copy -vcodec copy -acodec copy -reset_timestamps 1 -segment_time 00:10:00 -f segment <file_base>-%03d.<file_extension>

$ file: ls


% shell

# https://stackoverflow.com/a/2556282/2892779
# Generate a random number in a range
shuf -i <start_range>-<end_range> -n 1

# https://stackoverflow.com/a/15703727
# Find files with size 0
find . -size 0

# https://stackoverflow.com/a/8183247
# Concatenate all text files adding a newline after each
for f in *.txt; do (cat "${f}"; echo) >> finalfile.txt; done

# Calculate checksum of files in a folder, recursively
find <folder> -type f | sort | xargs sha256sum -b | md5sum


% aws

# Put a String parameter in SSM
aws ssm put-parameter --name '<parameter-name>' --region '<aws_region>' --type 'String' --value '<value>'

$ aws_region: echo us-west-2; echo us-west-1; echo us-east-2; echo us-east-1


% docker

# Attach to a container
docker attach <container_id>

$ image_id: docker images --- --headers 1 --column 3
$ container_id: docker ps --- --headers 1 --column 1

% general, system

# Replace text in a file with sed
sed -i .bak 's/<string_to_replace>/<new_string>/' <file_name>

# List all files, but with some folders excluded
tree -a -I '.git|node_modules'

# Delete all test, development, bullet log files from ruby app
fd --type file --max-depth 2 --min-depth 1 --no-ignore "bullet.log|development.log|test.log" | xargs rm -rf


% ruby

# List options ruby 2.x+ was compiled/configured with
ruby -e "puts RbConfig::CONFIG['MAINLIBS']"


% ruby bundler

# Bundle audit and run updates
bundle audit check --update


% heroku

# Copy a file from a remote app, locally
heroku ps:copy <relative_file_path> -a <heroku_app_name>

# Add a new remote
heroku git:remote -a <heroku_app_name> -r <reference_name>


% zip unzip

# Unzip a selected file from a zip file
unzip -p <archive_zip_path> "<file_name>" output.eml


% applescript macos

# Find bundle ID of application
osascript -e 'id of app "<app_name>"'


% json jq
# Format all json schemas. Requires brew install moreutils
for file in app/schemas/*.json; do cat $file | jq -S | sponge $file; done


% xml xmllint
# Format all json schemas. Requires brew install moreutils
for file in spec/fixtures/*.xml; do xmllint --format $file | sponge $file; done

% network
# Find out what's listening on a port
lsof -n -i:<port> | grep LISTEN


% cargo rust

# List outdated cargo commands
cargo install-update --list
